# -*- coding: utf-8 -*-
"""SkinDisease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QQ9ojaivFbBrDr585egiyTl4mrcVaCIe
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import os
import tensorflow as tf
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dropout, Conv2D, GlobalAveragePooling2D

IMG_SAVE_PATH = '/content/drive/MyDrive/train'

Str_to_Int = {
    'Actinic keratosis': 0,
    'Atopic Dermatitis': 1,
    'Benign keratosis': 2,
    'Dermatofibroma': 3,
    'Melanocytic nevus': 4,
    'Melanoma':5,
    'Squamous cell carcinoma': 6,
    'Tinea Ringworm Candidiasis':7,
    'Vascular lesion': 8
}

NUM_CLASSES = 9


def str_to_Int_mapper(val):
    return Str_to_Int[val]

import os
import numpy as np
from PIL import Image
import cv2

dataset = []
for directory in os.listdir(IMG_SAVE_PATH):
    path = os.path.join(IMG_SAVE_PATH, directory)
    for image in os.listdir(path):
        new_path = os.path.join(path, image)
        try:
            imgpath = Image.open(new_path)
            imgpath = imgpath.convert('RGB')                 # Ensure 3 channels
            img = np.asarray(imgpath)
            img = cv2.resize(img, (240, 240))                # Resize to 240x240
            img = img / 255.0                                # Normalize
            dataset.append([img, directory])                 # Append to dataset
        except FileNotFoundError:
            print(f'File not found: {new_path}')
        except Exception as e:
            print(f"Error processing {new_path}: {e}")

data, labels = zip(*dataset)
temp = list(map(str_to_Int_mapper, labels))

import keras
labels = keras.utils.to_categorical(temp)

count=0
for i in data:
    if i.shape!=(240, 240, 3):
        count=count+1
print(count)

# @title DenseNet
from keras.applications import DenseNet121
from keras.callbacks import Callback, ModelCheckpoint
from keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.optimizers import Adam

densenet = DenseNet121(
    weights='imagenet',
    include_top=False,
    input_shape=(240, 240, 3)
)

def build_densenet():
    model = Sequential()
    model.add(densenet)
    model.add(layers.GlobalAveragePooling2D())
    model.add(layers.Dropout(0.5))
    model.add(layers.Dense(9, activation='softmax'))

    model.compile(
        loss='categorical_crossentropy',
        optimizer=Adam(learning_rate=0.00005),
        metrics=['accuracy']
    )

    return model

model = build_densenet()
model.summary()

history=model.fit(np.array(data), np.array(labels), epochs = 5, shuffle = True, validation_split = 0.2)

"""Save till this marker line"""

#marker number 1, save data to current position
import os
import pickle
import json
import numpy as np

# Save directory
save_dir = '/content/drive/MyDrive/final_project/marker1'
os.makedirs(save_dir, exist_ok=True)

# Save model
model.save(os.path.join(save_dir, 'model.keras'))

# Save training history
with open(os.path.join(save_dir, 'history.pkl'), 'wb') as f:
    pickle.dump(history.history, f)

# Save dataset
np.save(os.path.join(save_dir, 'data.npy'), np.array(data))
np.save(os.path.join(save_dir, 'labels.npy'), np.array(labels))

# Save label mapping
with open(os.path.join(save_dir, 'label_map.json'), 'w') as f:
    json.dump(Str_to_Int, f)

"""LOAD THE MARKER"""

import os
import pickle
import json
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model

# Load directory
load_dir = '/content/drive/MyDrive/final_project/marker1'

# Load model
model = load_model(os.path.join(load_dir, 'model.keras'))

# Load training history
with open(os.path.join(load_dir, 'history.pkl'), 'rb') as f:
    history = pickle.load(f)

# Load dataset
data = np.load(os.path.join(load_dir, 'data.npy'))
labels = np.load(os.path.join(load_dir, 'labels.npy'))

# Load label mapping
with open(os.path.join(load_dir, 'label_map.json'), 'r') as f:
    Str_to_Int = json.load(f)

import seaborn as sns
from matplotlib import pyplot as plt

def plot_acc(history_dict):
    sns.set()
    fig = plt.figure(0, (12, 4))

    # Plot Accuracy
    ax = plt.subplot(1, 2, 1)
    sns.lineplot(x=range(len(history_dict['accuracy'])), y=history_dict['accuracy'], label='train')
    sns.lineplot(x=range(len(history_dict['val_accuracy'])), y=history_dict['val_accuracy'], label='valid')
    plt.title('Accuracy')
    plt.tight_layout()

    # Plot Loss
    ax = plt.subplot(1, 2, 2)
    sns.lineplot(x=range(len(history_dict['loss'])), y=history_dict['loss'], label='train')
    sns.lineplot(x=range(len(history_dict['val_loss'])), y=history_dict['val_loss'], label='valid')
    plt.title('Loss')
    plt.tight_layout()

    plt.show()

plot_acc(history)

"""# Mobile Net"""

def mobilenet():
    model = Sequential([
        tf.keras.applications.mobilenet.MobileNet(input_shape=(240,240, 3), include_top=False),
        Dropout(0.5),
        Convolution2D(9, (1, 1), padding='valid'),
        Activation('relu'),        # Rectified Linear Unit - Activation Function
        GlobalAveragePooling2D(),  # Pooling Layer
        Activation('softmax')      # Softmax - Activation Function - For Multi Class Classification
    ])
    return model

from keras.layers import Convolution2D, Dropout, Activation, GlobalAveragePooling2D
from tensorflow.keras.models import Sequential
from tensorflow.keras.optimizers import Adam
import tensorflow as tf

# define the model
model_mobile = mobilenet()
model_mobile.compile(
    optimizer=Adam(learning_rate=0.0001),         # lr = learning_rate
    loss='categorical_crossentropy',   # Multi-class classification
    metrics=['accuracy']
)

model_mobile.summary()

history_mobile=model_mobile.fit(np.array(data), np.array(labels), epochs = 5, shuffle = True, validation_split = 0.3)

import seaborn as sns
import matplotlib.pyplot as plt

def plot_acc(history_obj):
    # Handle both dict and History object
    if hasattr(history_obj, 'history'):
        history_dict = history_obj.history
    else:
        history_dict = history_obj

    sns.set()
    fig = plt.figure(0, (12, 4))

    # Plot Accuracy
    ax = plt.subplot(1, 2, 1)
    sns.lineplot(x=range(len(history_dict['accuracy'])), y=history_dict['accuracy'], label='train')
    sns.lineplot(x=range(len(history_dict['val_accuracy'])), y=history_dict['val_accuracy'], label='valid')
    plt.title('Accuracy')
    plt.tight_layout()

    # Plot Loss
    ax = plt.subplot(1, 2, 2)
    sns.lineplot(x=range(len(history_dict['loss'])), y=history_dict['loss'], label='train')
    sns.lineplot(x=range(len(history_dict['val_loss'])), y=history_dict['val_loss'], label='valid')
    plt.title('Loss')
    plt.tight_layout()

    plt.show()

plot_acc(history_mobile)

"""Save to this marker"""

#marker number 2, save data to current position
import os
import pickle
import json
import numpy as np

# Save directory
save_dir = '/content/drive/MyDrive/final_project/marker2'
os.makedirs(save_dir, exist_ok=True)

# Save model
model.save(os.path.join(save_dir, 'model.keras'))

# Save training history (assuming history is a dict)
with open(os.path.join(save_dir, 'history.pkl'), 'wb') as f:
    pickle.dump(history, f)

# Save dataset
np.save(os.path.join(save_dir, 'data.npy'), np.array(data))
np.save(os.path.join(save_dir, 'labels.npy'), np.array(labels))

# Save label mapping
with open(os.path.join(save_dir, 'label_map.json'), 'w') as f:
    json.dump(Str_to_Int, f)

"""Load the densenet marker"""

import os
import pickle
import json
import numpy as np
from keras.models import load_model

# Load directory
load_dir = '/content/drive/MyDrive/final_project/marker2'

# Load model
model = load_model(os.path.join(load_dir, 'model.keras'))

# Load training history
with open(os.path.join(load_dir, 'history.pkl'), 'rb') as f:
    history = pickle.load(f)

# Load dataset
data = np.load(os.path.join(load_dir, 'data.npy'))
labels = np.load(os.path.join(load_dir, 'labels.npy'))

# Load label mapping
with open(os.path.join(load_dir, 'label_map.json'), 'r') as f:
    Str_to_Int = json.load(f)

"""# **CNN**"""

from keras.models import Sequential
from keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten

def cnn():
    model=Sequential()

    model.add(Conv2D(8, kernel_size=(3,3), activation='relu', input_shape=(240,240,3)))
    model.add(Conv2D(16, kernel_size=(3,3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Conv2D(32, kernel_size=(3, 3), activation='relu'))
    model.add(MaxPooling2D(pool_size=(2, 2)))
    model.add(Dropout(0.25))

    model.add(Flatten())
    model.add(Dense(64, activation='relu'))
    model.add(Dropout(0.5))
    model.add(Dense(9, activation='softmax'))

    return model

from keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, Flatten
from keras.optimizers import Adam  # Make sure this is included

model_cnn = cnn()
model_cnn.compile(
    optimizer=Adam(learning_rate=0.0001),
    loss='categorical_crossentropy',
    metrics=['accuracy']
)

model_cnn.summary()

history_cnn = model_cnn.fit(
    np.array(data),
    np.array(labels),
    epochs=5,
    shuffle=True,
    validation_split=0.25
)

import seaborn as sns
import matplotlib.pyplot as plt

def plot_acc(history_obj):
    history_dict = history_obj.history  # Access the internal dictionary

    sns.set()
    fig = plt.figure(0, (12, 4))

    # Plot Accuracy
    ax = plt.subplot(1, 2, 1)
    sns.lineplot(x=range(len(history_dict['accuracy'])), y=history_dict['accuracy'], label='train')
    sns.lineplot(x=range(len(history_dict['val_accuracy'])), y=history_dict['val_accuracy'], label='valid')
    plt.title('Accuracy')
    plt.tight_layout()

    # Plot Loss
    ax = plt.subplot(1, 2, 2)
    sns.lineplot(x=range(len(history_dict['loss'])), y=history_dict['loss'], label='train')
    sns.lineplot(x=range(len(history_dict['val_loss'])), y=history_dict['val_loss'], label='valid')
    plt.title('Loss')
    plt.tight_layout()

    plt.show()

plot_acc(history_cnn)

"""Save Model"""

model.save('/content/drive/MyDrive/final_project/SkinDiseasePrediction.h5')

"""# **Evaluate Model**

"""

IMG_SAVE_PATH_TESTING = '/content/drive/MyDrive/val'

import os
import PIL
import cv2
import numpy as np

dataset_testing = []

for directory in os.listdir(IMG_SAVE_PATH_TESTING):
    path = os.path.join(IMG_SAVE_PATH_TESTING, directory)
    for image in os.listdir(path):
        new_path = os.path.join(path, image)
        try:
            imgpath = PIL.Image.open(new_path)
            imgpath = imgpath.convert('RGB')               # Ensure 3-channel image
            img = np.asarray(imgpath)
            img = cv2.resize(img, (240, 240))              # Resize
            img = img / 255.0                              # Normalize
            dataset_testing.append([img, directory])       # Append with label
        except Exception as e:
            print(f"Error processing {new_path}: {e}")

# Unpack images and labels
testing_data, testing_labels = zip(*dataset_testing)

# Map string labels to integer indices
testing_temp = list(map(str_to_Int_mapper, testing_labels))

import keras
testing_labels = keras.utils.to_categorical(testing_temp)

model.evaluate(np.array(testing_data), np.array(testing_labels))

model_mobile.evaluate(np.array(testing_data), np.array(testing_labels))

from keras.utils import to_categorical
testing_labels = to_categorical(testing_temp, num_classes=9)

"""## Prediction"""

# !pip install scipy==1.5.4
# !pip install scikit-plot

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import numpy as np

# Predict classes
pred_probs = model.predict(np.array(testing_data))
pred_labels = np.argmax(pred_probs, axis=1)
true_labels = np.argmax(testing_labels, axis=1)

cm = confusion_matrix(true_labels, pred_labels)

disp = ConfusionMatrixDisplay(confusion_matrix=cm,
                              display_labels=list(Str_to_Int.keys()))
disp.plot(cmap=plt.cm.Blues, xticks_rotation='vertical')
plt.title('Confusion Matrix')
plt.show()

def make_preds(model, data):
    preds_probs = model.predict(np.array(data))
    preds = np.argmax(preds_probs, axis=1)
    return preds

pred_labels_densenet = make_preds(model, testing_data)
pred_labels_mobilenet = make_preds(model_mobile, testing_data)
pred_labels_cnn = make_preds(model_cnn, testing_data)

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt

def plot_confusion_matrix(true_labels, pred_labels, label_map, title):
    cm = confusion_matrix(true_labels, pred_labels)
    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=list(label_map.keys()))
    disp.plot(cmap=plt.cm.Blues, xticks_rotation='vertical')
    plt.title(title)
    plt.xlabel('Predicted Labels')
    plt.ylabel('True Labels')
    plt.show()

true_class_labels = np.argmax(testing_labels, axis=1)

plot_confusion_matrix(true_class_labels, pred_labels_densenet, Str_to_Int, "Confusion Matrix - DenseNet Predictions")

plot_confusion_matrix(true_class_labels, pred_labels_mobilenet, Str_to_Int, "Confusion Matrix - MobileNet Predictions")

plot_confusion_matrix(true_class_labels, pred_labels_cnn, Str_to_Int, "Confusion Matrix - CNN Predictions")

